{"version":3,"sources":["FiveDayForcast.js","App.js","serviceWorker.js","index.js"],"names":["Day","onClick","className","style","width","height","src","fontSize","FiveDayForecast","App","fetch","then","response","json","myJson","FiveDayForcast","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAEMA,G,MAAM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAGb,OACE,yBAAKC,UAAU,wCAAwCC,MAAO,CAAEC,MAAO,QACrE,oCAGA,yBACEF,UAAU,SACVC,MAAO,CAAEC,MAAO,GAAIC,OAAQ,IAE5BC,IAAG,2CAXkB,MAWlB,WACHL,QAASA,IAEX,yBAAKC,UAAU,OAAOC,MAAO,CAAEI,SAAU,WAAzC,gBAmBSC,EAZS,WACtB,OACE,yBAAKN,UAAU,kCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCASO,E,4LAzBXC,MAAM,oHACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,S,+BAIT,OACE,yBAAKZ,UAAU,0EAA0EC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,MACpH,6BACE,wBAAIH,UAAU,iCAAd,eACA,kBAACa,EAAD,OAEF,yBAAKb,UAAU,6CACb,2BAAOA,UAAU,eAAec,KAAK,OAAOC,YAAY,YACxD,4BAAQf,UAAU,iCAAiCC,MAAO,CAAEC,MAAO,MAAnE,gB,GAlBQc,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.25f5df1b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Day = ({ onClick }) => {\n  const defaultWeatherIcon = '10d';\n\n  return (\n    <div className=\"d-flex flex-column align-items-center\" style={{ width: '20%' }}>\n      <div>\n        Day\n      </div>\n      <img\n        className=\"border\"\n        style={{ width: 50, height: 50 }}\n        // Should be dynamic\n        src={`http://openweathermap.org/img/wn/${defaultWeatherIcon}@2x.png`}\n        onClick={onClick}\n      />\n      <div className=\"pt-3\" style={{ fontSize: '0.5rem'}}>\n        {`25F / 45F`}\n      </div>\n    </div>\n  );\n};\n\nconst FiveDayForecast = () => {\n  return (\n    <div className=\"d-flex justify-content-between\">\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n      <Day />\n    </div>\n  )\n};\n\nexport default FiveDayForecast;\n","import React from 'react';\nimport './App.css';\nimport FiveDayForcast from './FiveDayForcast';\n\nclass App extends React.Component {\n  componentDidMount() {\n    fetch('https://api.openweathermap.org/data/2.5/forecast?zip=94040&units=imperial&appid=8df9894bcace71d40e078411678d7fe8')\n      .then((response) => {\n        return response.json();\n      })\n      .then((myJson) => {});\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex flex-column justify-content-between border border-dark mt-3 ml-3\" style={{ width: 400, height: 500 }}>\n        <div>\n          <h4 className=\"border-bottom border-dark p-3\">Weather App</h4>\n          <FiveDayForcast />\n        </div>\n        <div className=\"d-flex flex-column align-items-center m-3\">\n          <input className=\"form-control\" type=\"text\" placeholder=\"Zipcode\" />\n          <button className=\"btn btn-outline-secondary mt-3\" style={{ width: 200 }}>\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}